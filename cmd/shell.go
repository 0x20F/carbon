package cmd

import (
	"co2/builder"
	"co2/database"
	"co2/docker"
	"co2/printer"
	"fmt"

	"github.com/spf13/cobra"
)

var (
	sh     bool
	custom string

	shellCmd = &cobra.Command{
		Use:   "shell",
		Short: "Composes a command for getting a shell within a specific container by id",
		Args:  cobra.MinimumNArgs(1),
		Run:   execShell,
	}
)

// Adds the required flags
func init() {
	shellCmd.Flags().BoolVarP(&sh, "sh", "s", false, "Use sh")
	shellCmd.Flags().StringVarP(&custom, "custom", "c", "", "Use custom shell")
}

// Executes the command and makes sure that the
// correct shell gets added to the built docker command.
//
// This will assume that /bin/bash is what you want most of
// the time so that's the default shell.
//
// It only looks through the running containers, and is not
// dependent of any carbon features since it runs on the
// docker api.
//
// Running the command and returning an interactive shell is too
// complex for now so the only thing this will do, if it manages
// to compile the command is to print it to standard output so it
// can be piped into something else.
func execShell(cmd *cobra.Command, args []string) {
	toRun := args[0]
	shell := "/bin/bash"

	if sh {
		shell = "/bin/sh"
	}

	if custom != "" {
		shell = custom
	}

	command := generateCommand(toRun, shell)
	if command != "" {
		fmt.Println(command)
		return
	}

	// If we get here, we didn't find the container
	printer.Error("ERROR", "container not found:", toRun)
}

// Generates the shell command based on the provided container
// identifier.
//
// The identifier can be either a custom Uid generated by carbon,
// a carbon service name, or a docker container name.
func generateCommand(ident, shell string) string {
	containers := docker.RunningContainers()
	found := ""

	for _, container := range containers {
		if container.Uid != ident && container.Name != ident {
			continue
		}

		found = container.Name
		break
	}

	if found == "" {
		saved := database.Containers()

		for _, container := range saved {
			if container.ServiceName != ident {
				continue
			}

			found = container.Name
			break
		}
	}

	if found == "" {
		return ""
	}

	cmd := builder.DockerShellCommand().
		Container(found).
		Shell(shell).
		Build()

	return cmd
}
